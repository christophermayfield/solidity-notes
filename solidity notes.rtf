{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Italic;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 HelveticaNeue;\f4\fnil\fcharset0 HelveticaNeue-Bold;\f5\fnil\fcharset0 HelveticaNeue-Light;
}
{\colortbl;\red255\green255\blue255;\red74\green80\blue93;\red0\green0\blue0;\red155\green162\blue177;
\red184\green93\blue213;\red81\green156\blue233;\red0\green0\blue0;\red33\green255\blue255;\red74\green80\blue93;
\red155\green162\blue177;\red184\green93\blue213;\red197\green136\blue83;\red223\green180\blue104;\red196\green200\blue209;
\red28\green30\blue36;\red70\green137\blue204;\red20\green21\blue26;\red255\green255\blue255;\red11\green97\blue255;
}
{\*\expandedcolortbl;;\cssrgb\c36078\c38824\c43922;\csgray\c0\c0;\cssrgb\c67059\c69804\c74902;
\cssrgb\c77647\c47059\c86667;\cssrgb\c38039\c68235\c93333;\cssrgb\c0\c0\c0;\cssrgb\c0\c99144\c100000;\cssrgb\c36078\c38824\c43922;
\cssrgb\c67059\c69804\c74902;\cssrgb\c77647\c47059\c86667;\cssrgb\c81961\c60392\c40000;\cssrgb\c90196\c75294\c48235;\cssrgb\c81176\c82353\c85490;
\cssrgb\c14510\c15686\c18824;\cssrgb\c33725\c61176\c83922;\cssrgb\c10196\c10980\c13333;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c48235\c100000;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 functions: do stuff, you know this\
public - anyone or any other contract can call your contracts function and execute its code.\
\
convention to start private function names with an _ \
you also put the private keyword after the function name \
\
view function - its only viewing the data but not modifying it\
pure function - your\'92e not even accessing any data in the app. \
\
Go through the lesson again. \
\
Check out the OpenZepplin library \
\
Events - are a way for your contract to communicate that something happened on the blockchain to your app front-end, which can be \'91listening\'92 for certain events and take action when they happen.\
\
\
Example:\
\
\pard\pardeftab720\sl320\partightenfactor0

\f1\i\fs28\fsmilli14400 \cf2 \cb3 \expnd0\expndtw0\kerning0
// declare the event
\f2\i0 \cf4 \
\pard\pardeftab720\sl320\partightenfactor0
\cf5 event\cf4  \cf6 IntegersAdded\cf4 (\cf5 uint\cf4  x, \cf5 uint\cf4  y, \cf5 uint\cf4  result);\
\
\cf5 function\cf4  \cf6 add\cf4 (\cf5 uint\cf4  _x, \cf5 uint\cf4  _y) \cf5 public\cf4  \{\
  \cf5 uint\cf4  result = _x + _y;\
  
\f1\i \cf2 // fire an event to let the app know the function was called:
\f2\i0 \cf4 \
  IntegersAdded(_x, _y, result);\
  \cf5 return\cf4  result;\
\}\
\
\pard\pardeftab720\sl320\partightenfactor0

\f0\fs24 \cf4 \
\cf7 Your app front-end could then listen for the event. A JS implementation would look something like: \
\
YourContrat.IntegersAdded(function(error, result) \{\
	//do something what that result\
\})
\f2\fs28\fsmilli14400 \cf4 \
\
\
\cf7 Mappings \
\
Mappings are essentially a key-value store for storing and looking up data. In the first example, the key is an address and the value is a uint, and in the second example, the key is a uint and the value is a string.\
\
mapping (address => uint) public accountBalance;\
\
mapping (uint => string) userIdToName;\
\
\
msg.sender\
\
this is a global variable that is available to all functions, which refers to the address of the person (or smart contract) who called the current function. \
\
In solidity, function execution always needs to start with an external caller. A contract will just sit on the blockchain doing nothing until someone calls one of the functions. So there will always be a msg.sender.\
\
\
Require \
\
require makes it so that the function will throw an error and stop executing if some condition is not true:\
\
require(keccak256(_name) == keccak256(\'93Chris));\
\
\
Inheritance \
\
use the word is to inherit from a superclass\
\
\
Internal and External \
\
In addition to public and private, Solidity has two more types of visibility for functions: internal and external \
\
Internal is the same as private, except that it\'92s also accessible to contracts that inherit from this contract. \
\
External is similar to public, except that these functions can ONLY be called outside the contract - they can\'92t be called by other functions inside that contract. We\'92ll talk about why you might want to use enteral vs public later. \
\
For declaring internal or external functions, the syntax is the same as private or public. \
\
Interfaces \
\
Four our contract to talk to another contract on the blockchain that we don\'92t own, first we need to define an interface. \
\
lets define an interface of the LuckyNumber contract: \
\
contract NumberInterface \{\
	function getNum(address _myAddress) public view returns (uint)\
\}\
\
\
Notice that this looks like defining a contract, with a few differences. For one, we\'92re only declaring the functions that we want to interact with - in this case getNum - and we don\'92t mention any of the other functions or state variables. \
\
\
Using an Interface:\
\
We can use it in a contract as follows:\
\
contract MyContract\{\
\
	address NumberInterfaceAddress = 0xab384543593475a\
	\
NumberInterface numberContract = NumberInterface(NumberInterfaceAddress)\
\
\}\
\
Constructors: function Ownable() a constructor, which is an optional special function that has the same name as the contract. It will get execute only one time, when the contract is first created. \
\
Function Modifiers: modifier onlyOwner(). Modifiers are kind of half-functions that are used to modify other functions, usually to check some requirements prior to execution. In this case, onlyOwner can be used to limit access so ONLY the OWNER of the contract can run this function. \
\
\
Inheritance:\
\
ZombieFeeding is ZombieFactory\
ZombieFactory is Ownable\
\
Thus ZombieFeeding is also Ownable, and can access the functions/events/modifiers from the Ownable contract. This applies to any contracts that inherit from ZombieFeeding in the future as well. \
\
Function Modfiers: A function modifier looks just like a function, but uses the keyword modifier instead of the keyword function. And it can\'92t be called directly like a function can - instead we can attach the modifiers name at the end fo the function definition to change that functions behavior. \
\
example: \
\
modifier onlyOwner() \{\
\
	require(msg.sender == owner);\
	_;\
\}\
\
We would use the modifier as follows: \
\
contract MyContract is Ownable\{\
\
	event LaughManiacally(string laugher);\
\
	//Note the usage of \'91onlyOwner below:\
	\
	function likeABoss() external onlyOwner \{\
		LaughManiacally(\'93muahaha\'94);\
	\}\
\}\
\
	Notice the onlyOwner modifier on the likeABoss function. When you call likeAboss, the code inside onlyOwner executes first. Then when it hits the _; statement in onlyOwner, it goes back and executes the code inside likeABoss.\
\
\
Gas\
\
Gas - the fuel Ethereum DApps run on\
\
In solidity, your users have to pay every time they execute a function on your DApp using a currently called gas. Users buy gas with Ether (the currency on Ethereum), so your users h ave to spend ETH in order to execute functions on your DApp.\
\
Visibility Modifiers:\
\
These control when and where the function can be called from: private means it\'92s only callable from other functions inside of the contract. Internal is like private, but can also be called by contracts that inherit from this one; external can only be called outside of the contract; and finally public can be called anywhere internally and externally. \
\
State Modifiers:\
\
We also have state modifiers, which tell us how the function interacts with the BlockChain: view tells us that by running the function, no data will be saved/changed. pure tells us that not only does the function not save any data to the blockchain, but it doesn\'92t read any data from the blockchain. Both of these don\'92t cost any gas to call if they\'92re called externally from outside of the contract (but they do cost gas if called internally by another function).\
\
Then we have custom modifiers, which we learned about in Lesson 3: onlyOwner and aboveLevel, for example: For these we can define custom logic to determine how they affect a function. \
\
Payable: \
\
payable functions are part of what makes Solidity and Ethereum so cool, they are a special type of function that can receive Ether. \
\
When you call an API function on a normal web server, m you can send US dollars along with your function call - nor can you send Bitcoin. \
\
But in Ethereum, because both the money (Ether), the data (transcation payload) and the contract code itself all live on Ethereum, its possible for you to call a function and pay money to the contract at the same time. \
\
This allows for some really interesting logic, like requiring a certain payment to the contract in order to execute the function. \
\
Withdrawls\
\
We learned how to send Ether to a contract. So what happens after you send it?\
\
After you send Ether to a contract, it gets stored in the contract\'92s Ethereum account, and it will be trapped here - unless you add a function to withdraw the Ether from the contract. \
\
You can write a function to withdraw Ether from the contract as follows: \
\
contract GetPaid is Ownable \{\
	function withdraw() external ownlyOwner \{\
		owner.transfer(this.balance);\
	\}\
\}\
\
Note that we\'92re using owner and onlyOwner from the Ownable contract, assuming that was imported. \
\
You can transfer Ether to an address using the transfer function, and this.balance will return the total balance stored the contract. So if 100 users had paid 1 ether to our contract, this.balance would equal 100 ether. \
\
You can use transfer to send funds to any Ethereum address. For example, you could have a function that transfers Ether back to the msg.sender if they overpaid for an item. \
\
uint itemFee = 0.001 ether;\
msg.sender.transfer(msg.value - itemFee);\
\
\
Random number generation via keccak256\
\
\pard\pardeftab720\sl320\partightenfactor0

\f1\i \cf8 \cb7 \outl0\strokewidth0 \strokec9 // Generate a random number between 1 and 100:
\f2\i0 \strokec10 \
\strokec11 uint\strokec10  randNonce = \strokec12 0\strokec10 ;\
\strokec11 uint\strokec10  random = \strokec11 uint\strokec10 (keccak256(\strokec13 now\strokec10 , \strokec13 msg\strokec10 .\strokec13 sender\strokec10 , randNonce)) % \strokec12 100\strokec10 ;\
randNonce++;\
\strokec11 uint\strokec10  random2 = \strokec11 uint\strokec10 (keccak256(\strokec13 now\strokec10 , \strokec13 msg\strokec10 .\strokec13 sender\strokec10 , randNonce)) % \strokec12 100\
\
\outl0\strokewidth0 \
\pard\pardeftab720\sl320\partightenfactor0
\cf7 \cb3 \
\
What this would do is take the timestamp of now, the msg. sender, and an incrementing nonce (a number that is only used once, so we don\'92t run the same has function with the same input parameters twice. \
\
It would then use keccak to convert these inputs to a random hash, convert that has to a uint, and then use %100 to take only the last 2 digits, giving us a totally random number between 0 and 99. \
\
This method is vulnerable to attack by a dishonest node. \
\
\pard\pardeftab720\sl360\partightenfactor0

\f3\fs32 \cf14 \cb15 \outl0\strokewidth0 \strokec14 n Ethereum, when you call a function on a contract, you broadcast it to a node or nodes on the network as a\'a0
\f4\b \cf16 \strokec16 transaction
\f3\b0 \cf14 \strokec14 . The nodes on the network then collect a bunch of transactions, try to be the first to solve a computationally-intensive mathematical problem as a "Proof of Work", and then publish that group of transactions along with their Proof of Work (PoW) as a\'a0
\f4\b \cf16 \strokec16 block
\f3\b0 \cf14 \strokec14 \'a0to the rest of the network.\
\
\
\
\pard\pardeftab720\sl360\sa240\partightenfactor0
\cf14 Once a node has solved the PoW, the other nodes stop trying to solve the PoW, verify that the other node's list of transactions are valid, and then accept the block and move on to trying to solve the next block.\
\pard\pardeftab720\sl380\sa240\partightenfactor0

\f4\b \cf14 This makes our random number function exploitable.
\f3\b0 \
\pard\pardeftab720\sl360\sa240\partightenfactor0
\cf14 Let's say we had a coin flip contract \'97 heads you double your money, tails you lose everything. Let's say it used the above random function to determine heads or tails. (
\f2\fs28\fsmilli14400 \cf11 \cb17 \strokec11 random >= 50
\f3\fs32 \cf14 \cb15 \strokec14 \'a0is heads,\'a0
\f2\fs28\fsmilli14400 \cf11 \cb17 \strokec11 random < 50
\f3\fs32 \cf14 \cb15 \strokec14 is tails).\
If I were running a node, I could publish a transaction\'a0
\f4\b only to my own node
\f3\b0 \'a0and not share it. I could then run the coin flip function to see if I won \'97 and if I lost, choose not to include that transaction in the next block I'm solving. I could keep doing this indefinitely until I finally won the coin flip and solved the next block, and profit.\
\
\
\pard\pardeftab720\sl720\sa200\partightenfactor0

\f5\fs48 \cf18 \strokec18 So how do we generate random numbers safely in Ethereum?\
\pard\pardeftab720\sl360\sa240\partightenfactor0

\f3\fs32 \cf14 \strokec14 Because the entire contents of the blockchain are visible to all participants, this is a hard problem, and its solution is beyond the scope of this tutorial. You can read\'a0{\field{\*\fldinst{HYPERLINK "https://ethereum.stackexchange.com/questions/191/how-can-i-securely-generate-a-random-number-in-my-smart-contract"}}{\fldrslt \cf19 \strokec19 this StackOverflow thread}}\'a0for some ideas. One idea would be to use an\'a0
\f4\b \cf16 \strokec16 oracle
\f3\b0 \cf14 \strokec14 \'a0to access a random number function from outside of the Ethereum blockchain.\
Of course, since tens of thousands of Ethereum nodes on the network are competing to solve the next block, my odds of solving the next block are extremely low. It would take me a lot of time or computing resources to exploit this profitably \'97 but if the reward were high enough (like if I could bet $100,000,000 on the coin flip function), it would be worth it for me to attack.\
So while this random number generation is NOT secure on Ethereum, in practice unless our random function has a lot of money on the line, the users of your game likely won't have enough resources to attack it.\
Because we're just building a simple game for demo purposes in this tutorial and there's no real money on the line, we're going to accept the tradeoffs of using a random number generator that is simple to implement, knowing that it isn't totally secure.\
In a future lesson, we may cover using\'a0
\f4\b \cf16 \strokec16 oracles
\f3\b0 \cf14 \strokec14 \'a0(a secure way to pull data in from outside of Ethereum) to generate secure random numbers from outside the blockchain.\
\
\pard\pardeftab720\sl360\partightenfactor0

\f2\fs28\fsmilli14400 \cf7 \cb3 \outl0\strokewidth0 \
\pard\pardeftab720\sl320\partightenfactor0
\cf7 \
}